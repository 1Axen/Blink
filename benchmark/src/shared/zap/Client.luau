--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, shadowing, incorrect_standard_library_use)
-- Client generated by Zap v0.6.1 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end

local reliable = ReplicatedStorage:WaitForChild("ZAP_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")

local time = 0
export type Entity = ({
	id: (number),
	x: (number),
	y: (number),
	z: (number),
	orientation: (number),
	animation: (number),
})
function types.write_Entity(value: Entity)
	alloc(1)
	buffer.writeu8(outgoing_buff, outgoing_apos, value.id)
	alloc(1)
	buffer.writeu8(outgoing_buff, outgoing_apos, value.x)
	alloc(1)
	buffer.writeu8(outgoing_buff, outgoing_apos, value.y)
	alloc(1)
	buffer.writeu8(outgoing_buff, outgoing_apos, value.z)
	alloc(1)
	buffer.writeu8(outgoing_buff, outgoing_apos, value.orientation)
	alloc(1)
	buffer.writeu8(outgoing_buff, outgoing_apos, value.animation)
end
function types.read_Entity()
	local value;
	value = {}
	value.id = buffer.readu8(incoming_buff, read(1))
	value.x = buffer.readu8(incoming_buff, read(1))
	value.y = buffer.readu8(incoming_buff, read(1))
	value.z = buffer.readu8(incoming_buff, read(1))
	value.orientation = buffer.readu8(incoming_buff, read(1))
	value.animation = buffer.readu8(incoming_buff, read(1))
	return value
end

RunService.Heartbeat:Connect(function(dt)
	time += dt

	if time >= (1 / 61) then
		time -= (1 / 61)

		if outgoing_used ~= 0 then
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

			reliable:FireServer(buff, outgoing_inst)

			outgoing_buff = buffer.create(64)
			outgoing_used = 0
			outgoing_size = 64
			table.clear(outgoing_inst)
		end
	end
end)

local events = table.create(2)
local event_queue: { [number]: { any } } = table.create(2)
return {
	Booleans = {
		Fire = function(Value: ({ (boolean) }))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len = #Value
			assert(len >= 0)
			assert(len <= 1000)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			for i = 1, len do
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value[i] and 1 or 0)
			end
		end,
	},
	Entities = {
		Fire = function(Value: ({ (Entity) }))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len = #Value
			assert(len >= 0)
			assert(len <= 1000)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			for i = 1, len do
				types.write_Entity(Value[i])
			end
		end,
	},
}
