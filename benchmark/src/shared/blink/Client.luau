--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.8.0 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type BufferSave = {Size: number, Cursor: number, Buffer: buffer, Instances: {Instance}}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local Types = {}
local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}


export type Entity = { id: number, x: number, y: number, z: number, orientation: number, animation: number,  }

function Types.ReadEntity(): (Entity)
	local BLOCK_START = Read(6)
	local Value: Entity;
	Value = {} :: any
	Value.id = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	Value.x = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	Value.y = buffer.readu8(RecieveBuffer, BLOCK_START + 2)
	Value.z = buffer.readu8(RecieveBuffer, BLOCK_START + 3)
	Value.orientation = buffer.readu8(RecieveBuffer, BLOCK_START + 4)
	Value.animation = buffer.readu8(RecieveBuffer, BLOCK_START + 5)
	return Value
end

function Types.WriteEntity(Value: Entity): ()
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, Value.id)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Value.x)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value.y)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.z)
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value.orientation)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.animation)
end

function Types.ReadEVENT_Booleans(): ({boolean})
	local BLOCK_START = Read(2)
	local Value: {boolean};
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 1000 then error(`Expected "Length" to be smaller than 1000, got {Length} instead.`) end
	Value = table.create(Length)
	local ARRAY_START_1 = Read(1 * Length)
	for Index = 1, Length do
		local Item_1;
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		Item_1 = (buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1)
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

function Types.WriteEVENT_Booleans(Value: {boolean}): ()
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 1, #Value)
	local ARRAY_START_1 = Allocate(1 * #Value)
	for Index = 1, #Value do
		local Item_1 = Value[Index]
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1 and 1 or 0)
	end
	-- END ARRAY
end

function Types.ReadEVENT_Entities(): ({Entity})
	local BLOCK_START = Read(2)
	local Value: {Entity};
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 1000 then error(`Expected "Length" to be smaller than 1000, got {Length} instead.`) end
	Value = table.create(Length)
	local ARRAY_START_1 = Read(6 * Length)
	for Index = 1, Length do
		local Item_1;
		Item_1 = {} :: any
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		Item_1.id = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		Item_1.x = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		Item_1.y = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		Item_1.z = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		Item_1.orientation = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		Item_1.animation = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

function Types.WriteEVENT_Entities(Value: {Entity}): ()
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 1, #Value)
	local ARRAY_START_1 = Allocate(6 * #Value)
	for Index = 1, #Value do
		local Item_1 = Value[Index]
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1.id)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1.x)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1.y)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1.z)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1.orientation)
		local OPERATION_OFFSET = ARRAY_START_1; ARRAY_START_1 += 1;
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1.animation)
	end
	-- END ARRAY
end


local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end

local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)

Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)

Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)

return {
	StepReplication = StepReplication,
	Booleans = {
		Fire = function(Value: {boolean}): ()
			Types.WriteEVENT_Booleans(Value)
		end
	},
	Entities = {
		Fire = function(Value: {Entity}): ()
			Types.WriteEVENT_Entities(Value)
		end
	},
}