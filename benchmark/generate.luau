local fs = require("@lune/fs")
local net = require("@lune/net")
local process = require("@lune/process")

local ResultJSON = fs.readFile("./result.json")
local Result = net.jsonDecode(ResultJSON)

local Seperator = "*The tables below were automatically generated by this [script](https://github.com/1Axen/Blink/blob/main/benchmark/generate.luau).*"
local Header = string.split(fs.readFile("../docs/Benchmarks.md"), Seperator)
local Contents = Header[1] .. Seperator

local function QueryWMIC(Component: string, Properties: string): {string}
    local SpawnResult = process.spawn("wmic", {Component, "get", Properties})
    assert(SpawnResult.ok, SpawnResult.stderr)

    local Lines = string.split(SpawnResult.stdout, "\n")

    --> Remove header and padding
    table.remove(Lines, 1)
    table.remove(Lines, #Lines)
    table.remove(Lines, #Lines)

    --> Parse text
    local QueryResult = {}
    for Index, Line in Lines do
        --> Remove padding
        Line = string.gsub(Line, "\r", "")
        Line = string.sub(Line, 1, #Line - 1)

        if Component == "cpu" then
            table.insert(QueryResult, Line)
            continue
        end

        local SubResult = {}
        local LineResults = string.split(Line, " ")
        for Index, Result in LineResults do
            --> Ignore empty lines
            if string.gsub(Result, "%c", "") == "" then
                continue
            end

            table.insert(SubResult, Result)
        end

        table.insert(QueryResult, SubResult)
    end

    return QueryResult
end

local function WriteComputerSpecs()
    local Processor = QueryWMIC("cpu", "name")
    local MemorySticks = QueryWMIC("memorychip", "Capacity,Speed")
    
    Contents ..= `\n## Computer Specs`
    Contents ..= `\nProcessor: \`{Processor[1]}\`  `

    for Slot, Stick in MemorySticks do
        local Capacity = tonumber(Stick[1])
        Capacity //= 1e+9
        Contents ..= `\nMemory #{Slot}: \`{Capacity}GB {Stick[2]}\`  `
    end
end

type Benchmark = {
    Sent: number,
    Recieve: number,
    Framerate: {number}
}

local function WriteToolResults(Name: string, Results: {[string]: Benchmark})
    local Output = `\n## {Name}\n`
    Output ..= `|{Name} (FPS)|Median|P0|P80|P90|P95|P100|Loss (%)|`
    Output ..= `\n|---|---|---|---|---|---|---|---|`
    for Benchmark, Samples in Results do
        local Link = `[{Benchmark}](https://github.com/1Axen/Blink/blob/main/benchmark/src/shared/benches/{Benchmark}.luau)`
        local Loss = math.floor((1 - (Samples.Recieve / Samples.Sent)) * 100)

        if Loss > 50 then
            Output ..= `\n|{Link}|-|-|-|-|-|-|{Loss}%`
            continue
        end

        Output ..= `\n|{Link}|{table.concat(Samples.Framerate, "|")}|{Loss}%|`
    end
    Contents ..= Output
end

WriteComputerSpecs()

for Name, Benchmarks in Result do
    WriteToolResults(Name, Benchmarks)
end

fs.writeFile("../docs/Benchmarks.md", Contents)