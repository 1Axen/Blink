option ClientOutput = "../Network/Client.luau"
option ServerOutput = "../Network/Server.luau"
option FutureLibrary = "ReplicatedStorage.Packages.Future"
option PromiseLibrary = "ReplicatedStorage.Packages.Promise"
option ManualReplication = false

type Health = u8(0..100)
type Array = u8[8]
type ArrayVariant = u8[1..200]
type Booleans = bool[8]?
type Username = string(3..20)?
type UnitVector = vector(0..1)

type Buffer = buffer
type VariantSizeBuffer = buffer(5..10)
type Location = CFrame
type Locations = CFrame[8]
type OptionalLocation = CFrame?



enum State = ( None, Dead, Down, Alive )?
struct Entity = {
	Identifier = u8,
	Health = Health,
    LocalState = ( Replicated, Unreplicated )?,
    Character = State,
	Direction = UnitVector,
    Deep = {
        Empty = u8[0],
        Complex = u8[1..12],
        Vector = UnitVector,
    }?
}?

struct Character = {
    Identifier = u8,
    Health = u8(0..100)
}

event ServerReliable = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = u8
}

event ServerUnreliable = {
    From = Server,
    Type = Unreliable,
    Call = SingleSync,
    Data = Entity
}

event ClientReliable = {
    From = Client,
    Type = Reliable,
    Call = SingleSync,
    Data = u8
}

event ClientUnreliable = {
    From = Client,
    Type = Unreliable,
    Call = SingleSync,
    Data = Entity
}

event Custom = {
    From = Client,
    Type = Unreliable,
    Call = SingleSync,
    Data = u8[1]
}

function Example = {
    Yield = Coroutine,
    Data = u8,
    Return = u8
}

function ExampleFuture = {
    Yield = Future,
    Data = u8,
    Return = u8
}

function ExamplePromise = {
    Yield = Promise,
    Data = u8,
    Return = u8
}