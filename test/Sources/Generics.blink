option ClientOutput = "../../Network/ClientGenerics.luau"
option ServerOutput = "../../Network/ServerGenerics.luau"
option FutureLibrary = ""
option PromiseLibrary = ""

enum a = "Type" {
    Header {
        Sequence: u8,
        Fragments: u8
    },
    Fragment {
        Fragment: u8,
        Fragments: u8,
    }
}

map GenericMap<Key, Value> = {[Key]: Value}

enum GenericEnum<T, G> = "Type" {
    A {
        Data: T
    },
    B {
        Data: G
    }
}

map Map = GenericMap<string, u8>
enum b = GenericEnum<string, u8>

struct Packet<T> {
    Sequence: u16,
    Ack: u16,
    Data: enum "Type" {
        Single {
            Data: T
        },
        Fragment {
            Fragment: u8,
            Fragments: u8,
            Data: T
        }
    }
}

export struct Entity {
    id: u8,
    pos: vector,
    angle: u16,
}

event Snapshot {
    From: Client,
    Type: Unreliable,
    Call: SingleSync,
    Data: Packet<Entity>
}