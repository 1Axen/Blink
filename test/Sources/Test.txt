option ClientOutput = "../Network/Client.luau"
option ServerOutput = "../Network/Server.luau"
option ManualReplication = false

type A = CFrame
type B = CFrame[10]
type C = CFrame?
type D = Color3

type InstanceArray = Instance(Sound)[10]
type ConstrainedArray = u8(0..10)[10]

enum States = ( A, B, C, D )

type Number = u8
struct Example = {
    Field = u8,
    Enum = States,
    Nested = {
        Guh = u8,
        Array = u8[10],
        OptionalArray = u8[2]?
    }
}

event ArrayPrimitive = {
    From = Server,
    Type = Unreliable,
    Call = SingleSync,
    Data = u8[8]
}

event OptionalPrimitive = {
    From = Server,
    Type = Unreliable,
    Call = SingleSync,
    Data = u8?
}

event ReliableServer = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = u8
}

event ReliableClient = {
    From = Client,
    Type = Reliable,
    Call = SingleSync,
    Data = u8
}

event UnreliableServer = {
    From = Server,
    Type = Unreliable,
    Call = SingleSync,
    Data = u8
}

event UnreliableClient = {
    From = Client,
    Type = Unreliable,
    Call = SingleSync,
    Data = u8
}

event InstanceAny = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = Instance
}

event InstanceOfType = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = Instance(Sound)
}

event InstanceOptional = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = Instance?
}

event Reference = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = Example?
}

event ReferenceArray = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = Example[8]
}

event ReferenceOptional = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = Example?
}

function RemoteFunction = {
    Yield = Coroutine,
    Data = u8,
    Return = u8
}

event Tuple = {
    From = Server,
    Type = Reliable,
    Call = SingleSync,
    Data = [u8, States, u16?, Instance, Instance?, u8[8]]
}

event TupleUnreliable = {
    From = Server,
    Type = Unreliable,
    Call = SingleSync,
    Data = [u8, States, u16?, Instance, Instance?]
}

function TupleFunction = {
    Yield = Coroutine,
    Data = [u8, States, u16?, Instance, Instance?],
    Return = [Instance?, Instance, u16?, States, u8]
}

scope Combat = {
    event FireWeapon = {
        From = Client,
        Type = Reliable,
        Call = SingleSync,
        Data = {
            Origin = vector,
            Destination = vector,
            Impact = {
                Hit = Instance (BasePart)
            }
        }
    }
}