option types_output = "../out/types"

import "./large.blink" as external

type health = u8[0.0..100]
type hash_map = map {[string]: u8}
type byte_vector = vector<u8, u8, u8>

type c = struct {
    field: u8(0..0)
}

type keywords = enum {
    "option",
}

type Option<T> = enum "has_value" {
    true {
        value: T
    },
    false {}
}

type e<K, V> = struct {
    key: K,
    value: V
}

type f = c & struct {
    some_field: u8
}

type g = e<u8, string>

type node<T> = struct {
    value: T,
    next: node<T>?
}

type byte_linked_list = node<u8>

event send {
    from: Server,
    type: Reliable,
    call: SingleSync,
    data: (health, hash_map: hash_map, c, words: keywords, input: Option<unknown>, e<u8, u8>, f)
}

function request {
    yield: Coroutine,
    data: u8
}

scope foo {
    type bar = u8(0..1)
}

type foo_bar = foo.bar