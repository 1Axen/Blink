option types_output = "../out/types"

import "./large.blink" as external

type a = u8[0.0..255]
type b = map {[string]: u8}

type c = struct {
    field: u8(0..0)
}

type d = enum {
    "option",
}

type d_tagged<T> = enum "Type" {
    Some {
        Value: T
    },
    None {}
}

type e<K, V> = struct {
    key: K,
    value: V
}

type f = c & struct {
    some_field: u8
}

event g {
    from: Server,
    type: Reliable,
    call: SingleSync,
    data: (a, foo: b, c, bar: d, d_tagged<unknown>, e<u8, u8>, f)
}

function h {
    yield: Server,
    data: u8
}

scope foo {
    type bar = u8(0..1)
}

type foo_bar = foo.bar